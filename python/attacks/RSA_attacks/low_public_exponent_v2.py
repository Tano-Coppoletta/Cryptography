
from Crypto.PublicKey import RSA

def iroot(k,n):
    u, s = n, n+1
    while(u < s):
        s = u
        t = (k-1)*s+n // pow(s,k-1)
        u = t //k
    return s

if __name__ == '__main__':
    x1 = (109122243636469707550711018195661170687409619107532053553306250129905193715844004112816834344622610785356382664692203912843067357302351546903609936807703727741692915627850414111929732731908052202645655422306346673568740831090084301971250700436296324714879489767394365348533252987621946447152355790698729847829,3, 73971582172221720975480290180657782856630731412501396897039088286823790752122440241066935345942112042897458901087025651772933251156524141953655795753578733202992406563839419064891460444221435902619902400562012855658283339255681701088409382676950930475265838295258904)
    x2 = (1009966742294880913846523854990433728137964241054697181317233711545228295961028442118231877897826887402281619524253121805411926794353147681612059889945421547722462642408876253805404118394019054780182576036879038104541971714867418213240868406531261071761979921727185573559340659907481095092404960016003300781703,3,73971582172221720975480290180657782856630731412501396897039088286823790752122440241066935345942112042897458901087025651772933251156524141953655795753578733202992406563839419064891460444221435902619902400562012855658283339255681701088409382676950930475265838295258904)
    x3 =(168131254834067794354293711543555586790023098291209880329690816527069925431373194184178934568387103673136232112524988154162246324022693980557526862542059175971616073063334727951861945275372914768816372405478509550485193474390659239993061515605226580052062523969178216991071736202415792801263706728338701371711, 3,73971582172221720975480290180657782856630731412501396897039088286823790752122440241066935345942112042897458901087025651772933251156524141953655795753578733202992406563839419064891460444221435902619902400562012855658283339255681701088409382676950930475265838295258904)
    x4 =(132393645973202466204342340255995529968307918435714922924887347756181488711733735490992967946932756732879054909509405194327947744084867869920158136328613551374368283396159932198313044601084295415367443896277994445793368134901801416048963980545519725142928756365833525608989854251277233772136920387926245307407,3, 73971582172221720975480290180657782856630731412501396897039088286823790752122440241066935345942112042897458901087025651772933251156524141953655795753578733202992406563839419064891460444221435902619902400562012855658283339255681701088409382676950930475265838295258904)
    x5 =(163966139602471931939077149624771137090548267866924125319689972644233178613956261284438750396147146735903483345306945765829805599556657652162587991707851632554065674262063546467013472081448524123353111670478589972341578565212288632309483388896586886189674523152962860188128881616589024589471155357408855350049, 3,73971582172221720975480290180657782856630731412501396897039088286823790752122440241066935345942112042897458901087025651772933251156524141953655795753578733202992406563839419064891460444221435902619902400562012855658283339255681701088409382676950930475265838295258904)

    vector = [x1, x2, x3, x4, x5]

    #I deduce that the first parameter is the modulus, the second is the public key and the third is the ciphertext

    for i in range(0,5):
        decrypted_int = iroot(vector[i][1],vector[i][2])
        print(decrypted_int.to_bytes(decrypted_int.bit_length() // 8+1,byteorder='big'))